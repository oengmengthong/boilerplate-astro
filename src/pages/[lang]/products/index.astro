---
import Layout from '../../../layouts/Layout.astro';
import Card from '../../../components/molecules/Card.astro';
import Button from '../../../components/atoms/Button.astro';
import { getProducts } from '../../../lib/api';
import { useI18n } from '../../../utils/i18n';

export function getStaticPaths() {
  return [
    { params: { lang: 'en' } },
    { params: { lang: 'km' } },
    { params: { lang: 'zh' } },
    { params: { lang: 'ja' } }
  ];
}

const { lang } = Astro.params;
const { t, translatePath } = useI18n(Astro.url);

let products = [];
try {
  products = await getProducts();
} catch (error) {
  console.error('Error fetching products:', error);
}

const formatCurrency = (amount: number) => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD'
  }).format(amount);
};
---

<Layout 
  title={t('products.title')}
  description={t('products.subtitle')}
>
  <div class="text-center">
    <h1 class="text-4xl font-bold tracking-tight text-gray-900 dark:text-white">{t('products.title')}</h1>
    <p class="mt-6 text-lg leading-8 text-gray-600 dark:text-gray-300">
      {t('products.subtitle')}
    </p>
  </div>

  <div class="mt-8">
    <div class="grid grid-cols-1 gap-x-6 gap-y-10 sm:grid-cols-2 lg:grid-cols-3 xl:gap-x-8">
      {products.map(product => (
        <div class="group relative bg-white dark:bg-gray-800 rounded-lg shadow-sm overflow-hidden border border-gray-200 dark:border-gray-700">
          <div class="aspect-h-1 aspect-w-1 w-full overflow-hidden rounded-t-lg bg-gray-200 lg:aspect-none group-hover:opacity-75 lg:h-64">
            <img
              src={product.thumbnail}
              alt={product.title}
              class="h-full w-full object-cover object-center lg:h-full lg:w-full"
              loading="lazy"
            />
          </div>

          <div class="p-4">
            <div class="flex justify-between">
              <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                <a href={translatePath(`/products/${product.id}`)}>
                  <span aria-hidden="true" class="absolute inset-0"></span>
                  {product.title}
                </a>
              </h3>
              <p class="text-sm font-medium text-purple-600 dark:text-purple-400">
                {product.category}
              </p>
            </div>

            <p class="mt-2 text-sm text-gray-600 dark:text-gray-300 line-clamp-2">
              {product.description}
            </p>

            <div class="mt-4 flex items-center justify-between">
              <div>
                <div class="flex items-center gap-2">
                  {[...Array(5)].map((_, i) => (
                    <span class={`text-sm ${i < Math.round(product.rating) ? 'text-yellow-400' : 'text-gray-300'}`}>
                      â˜…
                    </span>
                  ))}
                  <span class="text-sm text-gray-600 dark:text-gray-400">
                    ({product.rating})
                  </span>
                </div>
                <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
                  Brand: {product.brand}
                </p>
              </div>
            </div>

            <div class="mt-4 flex items-center justify-between">
              <div class="flex flex-col">
                <div class="flex items-baseline gap-2">
                  <span class="text-lg font-bold text-gray-900 dark:text-white">
                    {formatCurrency(product.price * (1 - product.discountPercentage / 100))}
                  </span>
                  {product.discountPercentage > 0 && (
                    <span class="text-sm text-gray-500 line-through">
                      {formatCurrency(product.price)}
                    </span>
                  )}
                </div>
                {product.discountPercentage > 0 && (
                  <span class="text-sm text-green-600 dark:text-green-400">
                    Save {Math.round(product.discountPercentage)}%
                  </span>
                )}
              </div>
              <div class="flex items-center gap-2">
                {product.stock < 10 && (
                  <span class="text-xs text-red-600 dark:text-red-400">
                    {t('products.stock.lowStock').replace('{{count}}', product.stock.toString())}
                  </span>
                )}
                <Button
                  data-product-id={product.id}
                  data-product-title={product.title}
                  data-product-price={product.price * (1 - product.discountPercentage / 100)}
                  class="add-to-cart"
                  disabled={product.stock === 0}
                >
                  {product.stock === 0 ? t('products.stock.outOfStock') : t('common.buttons.addToCart')}
                </Button>
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>

  {products.length === 0 && (
    <div class="text-center mt-16">
      <p class="text-gray-600 dark:text-gray-300">No products found. Please try again later.</p>
    </div>
  )}
</Layout>

<script>
  import { addItemToCart } from '../../../store/cart';

  document.querySelectorAll('.add-to-cart').forEach(button => {
    button.addEventListener('click', (e) => {
      const target = e.currentTarget as HTMLButtonElement;
      const productId = target.dataset.productId;
      const productTitle = target.dataset.productTitle;
      const productPrice = target.dataset.productPrice;

      if (productId && productTitle && productPrice) {
        addItemToCart({
          id: productId,
          name: productTitle,
          price: parseFloat(productPrice),
        });

        // Show success message
        const toast = document.createElement('div');
        toast.className = 'fixed bottom-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg transform transition-transform duration-300 ease-out';
        toast.textContent = 'Added to cart!';
        document.body.appendChild(toast);

        // Remove toast after 2 seconds
        setTimeout(() => {
          toast.style.transform = 'translateY(100%)';
          setTimeout(() => {
            document.body.removeChild(toast);
          }, 300);
        }, 2000);
      }
    });
  });
</script>